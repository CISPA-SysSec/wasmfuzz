diff --git a/fuzz/fuzz_targets/all_options.rs b/fuzz/fuzz_targets/all_options.rs
index 37c90e9..2e75777 100644
--- a/fuzz/fuzz_targets/all_options.rs
+++ b/fuzz/fuzz_targets/all_options.rs
@@ -9,56 +9,61 @@ use comrak::{
 use std::sync::Arc;
 
 fuzz_target!(|s: &str| {
-    let mut extension = ExtensionOptions::default();
-    extension.strikethrough = true;
-    extension.tagfilter = true;
-    extension.table = true;
-    extension.autolink = true;
-    extension.tasklist = true;
-    extension.superscript = true;
-    extension.header_ids = Some("user-content-".to_string());
-    extension.footnotes = true;
-    extension.description_lists = true;
-    extension.front_matter_delimiter = Some("---".to_string());
-    extension.multiline_block_quotes = true;
-    extension.math_dollars = true;
-    extension.math_code = true;
-    extension.shortcodes = true;
-    extension.wikilinks_title_after_pipe = true;
-    extension.wikilinks_title_before_pipe = true;
-    extension.underline = true;
-    extension.spoiler = true;
-    extension.greentext = true;
-    extension.alerts = true;
+    let extension = ExtensionOptions {
+        strikethrough: true,
+        tagfilter: true,
+        table: true,
+        autolink: true,
+        tasklist: true,
+        superscript: true,
+        header_ids: Some("user-content-".to_string()),
+        footnotes: true,
+        description_lists: true,
+        front_matter_delimiter: Some("---".to_string()),
+        multiline_block_quotes: true,
+        math_dollars: true,
+        math_code: true,
+        shortcodes: true,
+        wikilinks_title_after_pipe: true,
+        wikilinks_title_before_pipe: true,
+        underline: true,
+        spoiler: true,
+        greentext: true,
+        alerts: true,
+        ..Default::default()
+    };
 
-    let mut parse = ParseOptions::default();
-    parse.smart = true;
-    parse.default_info_string = Some("rust".to_string());
-    parse.relaxed_tasklist_matching = true;
-    parse.relaxed_autolinks = true;
     let cb = |link_ref: BrokenLinkReference| {
         Some(ResolvedReference {
             url: link_ref.normalized.to_string(),
             title: link_ref.original.to_string(),
         })
     };
-    parse.broken_link_callback = Some(Arc::new(cb));
+    let parse = ParseOptions {
+        smart: true,
+        default_info_string: Some("rust".to_string()),
+        relaxed_tasklist_matching: true,
+        relaxed_autolinks: true,
+        broken_link_callback: Some(Arc::new(cb)),
+    };
 
-    let mut render = RenderOptions::default();
-    render.hardbreaks = true;
-    render.github_pre_lang = true;
-    render.full_info_string = true;
-    render.width = 80;
-    render.unsafe_ = true;
-    render.escape = true;
-    render.list_style = ListStyleType::Star;
-    render.sourcepos = true;
-    render.escaped_char_spans = true;
-    render.ignore_setext = true;
-    render.ignore_empty_links = true;
-    render.gfm_quirks = true;
-    render.prefer_fenced = true;
-    render.tasklist_classes = true;
+    let render = RenderOptions {
+        hardbreaks: true,
+        github_pre_lang: true,
+        full_info_string: true,
+        width: 80,
+        unsafe_: true,
+        escape: true,
+        list_style: ListStyleType::Star,
+        sourcepos: true,
+        escaped_char_spans: true,
+        ignore_setext: true,
+        ignore_empty_links: true,
+        gfm_quirks: true,
+        prefer_fenced: true,
+        tasklist_classes: true,
+        ..Default::default()
+    };
 
     markdown_to_html(
         s,
diff --git a/fuzz/fuzz_targets/gfm.rs b/fuzz/fuzz_targets/gfm.rs
index cb90350..db0c5bf 100644
--- a/fuzz/fuzz_targets/gfm.rs
+++ b/fuzz/fuzz_targets/gfm.rs
@@ -9,16 +9,20 @@ use comrak::{markdown_to_html, ExtensionOptions, Options, RenderOptions};
 // options are routinely used by Commonmarker users.
 
 fuzz_target!(|s: &str| {
-    let mut extension = ExtensionOptions::default();
-    extension.strikethrough = true;
-    extension.tagfilter = true;
-    extension.table = true;
-    extension.autolink = true;
+    let extension = ExtensionOptions {
+        strikethrough: true,
+        tagfilter: true,
+        table: true,
+        autolink: true,
+        ..Default::default()
+    };
 
-    let mut render = RenderOptions::default();
-    render.hardbreaks = true;
-    render.github_pre_lang = true;
-    render.unsafe_ = true;
+    let render = RenderOptions {
+        hardbreaks: true,
+        github_pre_lang: true,
+        unsafe_: true,
+        ..Default::default()
+    };
 
     markdown_to_html(
         s,
diff --git a/fuzz/fuzz_targets/gfm_footnotes.rs b/fuzz/fuzz_targets/gfm_footnotes.rs
index 2848413..3ea4c8c 100644
--- a/fuzz/fuzz_targets/gfm_footnotes.rs
+++ b/fuzz/fuzz_targets/gfm_footnotes.rs
@@ -9,17 +9,21 @@ use comrak::{markdown_to_html, ExtensionOptions, Options, RenderOptions};
 // options are routinely used by Commonmarker users.
 
 fuzz_target!(|s: &str| {
-    let mut extension = ExtensionOptions::default();
-    extension.strikethrough = true;
-    extension.tagfilter = true;
-    extension.table = true;
-    extension.autolink = true;
-    extension.footnotes = true;
+    let extension = ExtensionOptions {
+        strikethrough: true,
+        tagfilter: true,
+        table: true,
+        autolink: true,
+        footnotes: true,
+        ..Default::default()
+    };
 
-    let mut render = RenderOptions::default();
-    render.hardbreaks = true;
-    render.github_pre_lang = true;
-    render.unsafe_ = true;
+    let render = RenderOptions {
+        hardbreaks: true,
+        github_pre_lang: true,
+        unsafe_: true,
+        ..Default::default()
+    };
 
     markdown_to_html(
         s,
diff --git a/fuzz/fuzz_targets/gfm_sourcepos.rs b/fuzz/fuzz_targets/gfm_sourcepos.rs
index 2310071..8cfd0d6 100644
--- a/fuzz/fuzz_targets/gfm_sourcepos.rs
+++ b/fuzz/fuzz_targets/gfm_sourcepos.rs
@@ -9,17 +9,21 @@ use comrak::{markdown_to_html, ExtensionOptions, Options, RenderOptions};
 // options are routinely used by Commonmarker users.
 
 fuzz_target!(|s: &str| {
-    let mut extension = ExtensionOptions::default();
-    extension.strikethrough = true;
-    extension.tagfilter = true;
-    extension.table = true;
-    extension.autolink = true;
+    let extension = ExtensionOptions {
+        strikethrough: true,
+        tagfilter: true,
+        table: true,
+        autolink: true,
+        ..Default::default()
+    };
 
-    let mut render = RenderOptions::default();
-    render.hardbreaks = true;
-    render.github_pre_lang = true;
-    render.unsafe_ = true;
-    render.sourcepos = true;
+    let render = RenderOptions {
+        hardbreaks: true,
+        github_pre_lang: true,
+        unsafe_: true,
+        sourcepos: true,
+        ..Default::default()
+    };
 
     markdown_to_html(
         s,
diff --git a/fuzz/fuzz_targets/quadratic.rs b/fuzz/fuzz_targets/quadratic.rs
index 8f54985..32dd369 100644
--- a/fuzz/fuzz_targets/quadratic.rs
+++ b/fuzz/fuzz_targets/quadratic.rs
@@ -91,11 +91,11 @@ impl Markdown {
 
                     // Place the markdown in `output`
                     for _ in 0..iterations {
-                        output.push_str(&prefix)
+                        output.push_str(prefix)
                     }
-                    output.push_str(&markdown);
+                    output.push_str(markdown);
                     for _ in 0..iterations {
-                        output.push_str(&suffix)
+                        output.push_str(suffix)
                     }
                 }
                 output
@@ -116,9 +116,9 @@ impl Markdown {
 
                     // Place the markdown in `output`
                     for _ in 0..iterations {
-                        output.push_str(&prefix)
+                        output.push_str(prefix)
                     }
-                    output.push_str(&markdown);
+                    output.push_str(markdown);
                 }
                 output
             }
@@ -130,7 +130,7 @@ impl Markdown {
     }
 
     fn should_fuzz_string(s: &str) -> bool {
-        if s.len() == 0 {
+        if s.is_empty() {
             // Repeating a zero-length string is useless
             return false;
         }
@@ -146,18 +146,18 @@ impl Markdown {
     /// A filter to guiding the fuzzer. The fuzzer will skip any input which fails this predicate
     fn should_fuzz(&self) -> bool {
         match self {
-            Markdown::Markdown { markdown } => Markdown::should_fuzz_string(&markdown),
+            Markdown::Markdown { markdown } => Markdown::should_fuzz_string(markdown),
             Markdown::Sandwich {
                 prefix,
                 markdown,
                 suffix,
             } => {
-                Markdown::should_fuzz_string(&prefix)
-                    && Markdown::should_fuzz_string(&markdown)
-                    && Markdown::should_fuzz_string(&suffix)
+                Markdown::should_fuzz_string(prefix)
+                    && Markdown::should_fuzz_string(markdown)
+                    && Markdown::should_fuzz_string(suffix)
             }
             Markdown::Tree { prefix, markdown } => {
-                Markdown::should_fuzz_string(&prefix) && Markdown::should_fuzz_string(&markdown)
+                Markdown::should_fuzz_string(prefix) && Markdown::should_fuzz_string(markdown)
             }
         }
     }
@@ -204,28 +204,29 @@ struct FuzzExtensionOptions {
 
 impl FuzzExtensionOptions {
     fn to_options(&self) -> ExtensionOptions {
-        let mut extension = ExtensionOptions::default();
-        extension.strikethrough = self.strikethrough;
-        extension.tagfilter = self.tagfilter;
-        extension.table = self.table;
-        extension.autolink = self.autolink;
-        extension.tasklist = self.tasklist;
-        extension.superscript = self.superscript;
-        extension.footnotes = self.footnotes;
-        extension.description_lists = self.description_lists;
-        extension.multiline_block_quotes = self.multiline_block_quotes;
-        extension.math_dollars = self.math_dollars;
-        extension.math_code = self.math_code;
-        extension.shortcodes = self.shortcodes;
-        extension.wikilinks_title_after_pipe = self.wikilinks_title_after_pipe;
-        extension.wikilinks_title_before_pipe = self.wikilinks_title_before_pipe;
-        extension.underline = self.underline;
-        extension.spoiler = self.spoiler;
-        extension.greentext = self.greentext;
-        extension.alerts = self.alerts;
-        extension.front_matter_delimiter = None;
-        extension.header_ids = None;
-        extension
+        ExtensionOptions {
+            strikethrough: self.strikethrough,
+            tagfilter: self.tagfilter,
+            table: self.table,
+            autolink: self.autolink,
+            tasklist: self.tasklist,
+            superscript: self.superscript,
+            footnotes: self.footnotes,
+            description_lists: self.description_lists,
+            multiline_block_quotes: self.multiline_block_quotes,
+            math_dollars: self.math_dollars,
+            math_code: self.math_code,
+            shortcodes: self.shortcodes,
+            wikilinks_title_after_pipe: self.wikilinks_title_after_pipe,
+            wikilinks_title_before_pipe: self.wikilinks_title_before_pipe,
+            underline: self.underline,
+            spoiler: self.spoiler,
+            greentext: self.greentext,
+            alerts: self.alerts,
+            front_matter_delimiter: None,
+            header_ids: None,
+            ..Default::default()
+        }
     }
 }
 
@@ -238,12 +239,13 @@ struct FuzzParseOptions {
 
 impl FuzzParseOptions {
     fn to_options(&self) -> ParseOptions {
-        let mut parse = ParseOptions::default();
-        parse.smart = self.smart;
-        parse.default_info_string = None;
-        parse.relaxed_tasklist_matching = self.relaxed_tasklist_matching;
-        parse.relaxed_autolinks = self.relaxed_autolinks;
-        parse
+        ParseOptions {
+            smart: self.smart,
+            default_info_string: None,
+            relaxed_tasklist_matching: self.relaxed_tasklist_matching,
+            relaxed_autolinks: self.relaxed_autolinks,
+            ..Default::default()
+        }
     }
 }
 
@@ -262,17 +264,18 @@ struct FuzzRenderOptions {
 
 impl FuzzRenderOptions {
     fn to_options(&self) -> RenderOptions {
-        let mut render = RenderOptions::default();
-        render.hardbreaks = self.hardbreaks;
-        render.github_pre_lang = self.github_pre_lang;
-        render.full_info_string = self.full_info_string;
-        render.width = self.width;
-        render.unsafe_ = self.unsafe_;
-        render.escape = self.escape;
-        render.list_style = self.list_style;
-        render.sourcepos = self.sourcepos;
-        render.escaped_char_spans = self.escaped_char_spans;
-        render
+        RenderOptions {
+            hardbreaks: self.hardbreaks,
+            github_pre_lang: self.github_pre_lang,
+            full_info_string: self.full_info_string,
+            width: self.width,
+            unsafe_: self.unsafe_,
+            escape: self.escape,
+            list_style: self.list_style,
+            sourcepos: self.sourcepos,
+            escaped_char_spans: self.escaped_char_spans,
+            ..Default::default()
+        }
     }
 }
 
